Core
1. Что такое виртуальная машина?
Виртуальная машина — это программная и/или аппаратная система, эмулирующая аппаратное обеспечение гостевой (target) 
платформы и исполняющая программы для target-платформы на host-платформе (платформа-хозяин) или виртуализирующая 
некоторую платформу и создающая на ней среды, изолирующие друг от друга программы и даже операционные системы.
т.е. по-простому VM - это программная копия физического компьютера, которая выполняет ПО написанное под конкретную 
платформу, переводя скомпилированный байт-код в машинные операции. например Java VM исполняет байт-код java, 
созданный из исходного кода java-программы компилятором javac.

Виртуальная машина (ВМ, VM) – это виртуальная среда, работающая как настоящий компьютер, но внутри другого компьютера. 
Если выражаться проще, то это приложение, которое имитирует компьютер с полноценной операционной системой и 
аппаратным обеспечением. Она запускается на изолированном разделе жесткого диска, установленного в компьютере-хосте 
(так называют системы, в рамках которых запускают ВМ). Благодаря виртуальным машинам пользователи могут тестировать 
программное обеспечение в различных окружениях (системах, конфигурациях и т.п.) на своем ПК без необходимости запускать 
и настраивать отдельное устройство. 

2. К какому типа языка программирование относиться Java?


Java — строго типизированный объектно-ориентированный язык программирования, разработанный компанией Sun Microsystems 
(далее приобретённой Oracle). Каждая переменная и константа представляет определенный тип, который строго определен. 
Тип данных определен диапазоном значений, которые может хранить переменная или константа. Все выражения и параметры 
javac проверяет на соответствие типов. Java - интерпретируемый язык, т.е. написанный код компилируется в байт-код Java, 
который передается в интерпретатор (JVM) Т.е. следует принципу "Писать один раз, запускать где угодно" - скомпилированный 
код Java может работать на всех платформах, поддерживающих Java, без необходимости перекомпиляции.

3. Из каких компонентов состоит Java (JDK, JRE, JVM)?

JVM (Java Virtual Machine) - виртуальная машина Java - основная часть исполняющей системы Java, так называемой 
Java Runtime Environment (JRE). Виртуальная машина Java исполняет байт-код Java, предварительно созданный из 
исходного текста Java-программы компилятором Java (javac). JVM обеспечивает платформо-независимый способ 
выполнения кода. Программисты могут писать код не задумываясь, как и где он будет выполняться.

JRE (Java Runtime Environment) - минимальная реализация виртуальной машины, необходимая для исполнения Java 
приложений, без компилятора и других средств разработки. Состоит из виртуальной машины и библиотек Java классов.

JDK (Java Development Kit) - комплект разработчика приложений на языке Java, включающий в себя компилятор, 
стандартные библиотеки классов Java, примеры, документацию, различные утилиты и исполнительную систему JRE. 

4. Для чего используется JDK?

5. Для чего используется JRE?

6. Для чего используется VM?

Java Development Kit (JDK) является одним из трех основных технологий, используемых в программировании на языке Java. 
К ним также относятся JVM (Java Virtual Machine) и JRE (Java Runtime Environment). 
Важно их различать, а также понимать, как они связаны:
  JVM отвечает за исполнение Java-программ;
  JRE создает и запускает JVM;
  JDK позволяет разработчикам создавать программы, которые могут выполняться и запускаться посредством JVM и JRE;
  
Начинающие Java-разработчики часто путают JDK и JRE. Различие заключается в том, что JDK представляет собой пакет 
инструментов для разработки программного обеспечения, тогда как JRE представляет собой пакет инструментов для 
запуска Java-кода.
JRE может использоваться, как отдельный компонент для простого запуска Java-программ, либо быть частью JDK. 
JDK требуется JRE, потому что запуск программ является неотъемлемой частью их разработки.

JDK (Java Development Kit) - это комплект разработчика приложений Java, включающий компилятор Java (javac), 
стандартные библиотеки классов Java, примеры, документацию, различные утилиты и исполнительную систему Java (JRE).

Техническое определение: JDK — это реализация спецификации платформы Java, включающая в себя компилятор и библиотеки классов.
Обобщенное определение: JDK — это программный пакет, который вы загружаете для создания Java приложений.

JRE (Java Runtime Environment) представляет минимальную реализацию виртуальной машины, необходимую для исполнения Java-приложений.
JRE состоит из виртуальной машины JVM (Java Virtual Machine) и библиотек Java-классов.

JVM (Java Virtual Machine) - это виртуальная машина Java, предназначенная для исполнения Java программ и являющаяся 
основной частью JRE.
JVM интерпретирует байт-коды Java приложений, полученные в результате компиляции исходного кода Java-программы 
компилятором javac. Т.е. виртуальная Java машина содержит интерпретатор байт-кода.
Для повышения производительности во многих JVM дополнительно применяется JIT-компиляция, предназначенная для 
преобразования часто исполняемых фрагментов байт-кода в машинный код.

7. Расскажите про примитивные типы?

Примитивные:

byte (целые числа, 1 байт или 8 бит, интервал значений [-128, 127] т.е. 2^7, т.к. отрицательные, ноль и положительные)
short (целые числа, 2 байта или 16 бит, [-32768, 32767])
int (целые числа, 4 байта, [-2147483648, 2147483647])
long (целые числа, 8 байт, [-9223372036854775808, 9223372036854775807])
float (вещественные числа, 4 байта)
double (вещественные числа, 8 байт)
char (символ Unicode, 2 байта, [0, 65536])
boolean (значение истина/ложь, используется int, зависит от JVM)
Примитивы передаются по значению.

Ссылочные - типы, которые содержат адреса в местах памяти, где хранятся данные. Т.е. хранят дескрипторы объектов в кучном пространстве.
Это все остальные типы: классы, перечисления и интерфейсы, например, объявленные в стандартной библиотеке Java, а также массивы.
String предназначен для хранения строк текста. Объекты класса String являются неизменяемыми (immutable). 
Поэтому, когда вам кажется, что вы меняете строку, то на самом деле вы создаёте новую строку.
Классы-обертки - соответствуют примитивным типам, однако являются ссылочными, содержат методы 
для преобразования типов, а также другие константы и методы полезные при работе с примитивами.

Byte
Short
Integer
Long
Float
Double
Character
Boolean
Классы-обертки позволяют нивелировать недостатки, которые есть у примитивных типов. Самый очевидный из них — примитивы не имеют методов.

Пример 1. у примитивов нет метода toString(), поэтому, например, нельзя преобразовать число типа int в строку. А вот с классом-оберткой Integer — запросто.

public static void main(String[] args) {
   Integer i = new Integer(432);
   String s = i.toString();
}
Пример 2. сложности с обратным преобразованием. Допустим, у нас есть строка, которая содержит число.
В случае с примитивным типом int это число из строки нельзя достать и превратить, собственно, в число. Но благодаря классам-оберткам такая возможность имеется.

public static void main(String[] args) {
   String s = "1166628";
   Integer i = Integer.parseInt(s);
   System.out.println(i);
}
Автобоксинг - помещение примитивного типа в класс-обертку.

Анбоксинг - присвоение значения класса-обертки примитивному типу.

8. Описать шаги для компиляции и запуска приложения в консоли (javac java)?

Создаем класс - файл с расширением *.java Main.java
Переходим в каталог, где лежит данный файл, и запускаем компилятор javac, где указываем что компилируем и куда складываем javac -d куда Main.java
На выходе получаем файл Main.class - это байт-код.
Далее запускаем байт-код, расширение можно не указывать java -cp откуда Main arg0 arg1 arg2

Компиляция в программировании — это приведение исходного кода в байт-код для последующего старта программы. 
Порядок действий от исходного кода до запуска программ выглядит так:
Есть исходный код в файле с именем НазваниеКласса.java;
Если в коде нет ошибок, он компилируется в байт-код (в файл НазваниеКласса.class);
Программа запускается.

Для чего нужна команда javac
Скомпилировать — это как? :) В этом нам поможет команда javac, в аргументе которой необходимо указать нужный файл: 

    javac Test.java

Если нет ошибок в коде, рядом с файлом Test.java появится файл Test.class. Это и есть скомпилированный байт-код. 
Теперь его нужно запустить. Здесь используется команда java, запускающая байт-код:

    D:\Java>java Test
    

9. Что такое оператор условия?

Оператор условия - это операторы (ключевые слова языка), которые создают ветвление алгоритма программы.

10. Какие типы оператор условия существуют?

  Конструкция if-else
if (условие) {
    оператор1;
    оператор2;
} else {
    оператор1;
    оператор2; 
}

  Множественное условие switch
switch(i) {
    case 1:
        System.out.println("Тест работает.");
        break;
    case 2:
        System.out.println("Тест добрый.");
        break;
    case 3:
        System.out.println("Тест поможет вам.");
        break;
    }
пример из теста:

public class ExampleSwitch {
    public static void main(String args[]) {
        for(int i = 0; i < 3; i++) {
            switch(i) {
                case 0: break;
                case 1: System.out.print("one ");
                //break;
                case 2: System.out.print("two ");
                //break;
                case 3: System.out.print("three ");
                //break;
            }
            //System.out.println("End of step.");
        }
        System.out.println("done");
    }
    //вывод: one two three two three done
}

  Тернарный оператор Логическое_выражение ? Выражение1 : Выражение2
int largerNum = lowNum < highNum ? highNum : lowNum; 

11. Расскажите про булевы операции || &&? Что такое short-circuit?

|| - логическое ИЛИ, результат будет True хотя бы один операнд True.
&& - логическое И, результат будет False хотя бы один операнд False.
Операторы & и | всегда проверяют значение обоих операндов.
&& и || носят название операторов короткой схемы, т.к. если результат булевого 
выражения может быть определён из левого операнда, правый операнд не вычисляется.

12. Что такое тернарное условие?

Тернарный оператор использует три операнда. Выражение записывается в следующей форме: 
(Условие) ? Выражение, если условие Истинно : Выражение, если условие Ложно;

13. Что такое циклы и для чего они используются?

Цикл — это многократно повторяющийся фрагмент программы. 
Применяются очень широко, например для обхода чего-либо и 
многократного повторения какой-либо операции.

14. Для чего используется цикл for?

Определенный цикл используется для многократного 
повторения чего-либо, если четко известно кол-во требуемых повторений.

for - цикл типа "n-раз"

for (int i = 0; i < n; i++) {
    оператор1;
    оператор2;
} 

15. Для чего используется цикл foreach?

Цикл используется при обходе массивов, предполагаю коллекций и других объектов, 
поддерживающих итератор. При этом цикл выполняется кол-во раз равное кол-ву элементов

for (String str: argv) { //argv - коллекция
    оператор1;
    оператор2;
} 

16. Для чего используется цикл while?

Неопределенный цикл, используется для многократного повторения 
чего-либо, когда неизвестно кол-во требуемых повторений, а 
выполняется определенное условие

while - цикл "пока"

while (условие) {
    оператор1;
    оператор2;
} 

17. Для чего используется цикл do while?

Неопределенный цикл, используется также как и while, 
но тело цикла нужно выполнить хотя бы раз, т.е. условное 
выражение проверяется в конце цикла

do {
    оператор1;
    оператор2;
} while (условие)


18. Что такое массив?

Массив - это структура данных, которая хранит упорядоченные коллекции фиксированного размера элементов нужного типа.
Массив в Java это объект и доступ к нему осуществляется через ссылочный тип.
Одномерный массив - список однотипных переменных.
Многомерный массив - это массив массивов.

19. Как создать массив?

Создаем переменную ссылочного типа на массив и ссылаем её на созданный объект массива из 10 элементов: int[] array = new int[10];
Так же можно не указывать кол-в элементов, а сразу их объявить:
int[] array = new int[]{1, 2, 3};
int[] smallPrimes = { 2, 3, 5, 7, 11, 13};
можно сделать безымянный массив: new int [ ] { 16, 19, 23 , 29 , 31, 37}

20. Как присвоить значение ячейке массива?

Обратиться к массиву по индексу и присвоить значение. Индексирование массива начинается с нуля. array[0] = 10; array[0] = 20;

21. Как можно пройти по всем элементам массива?

С помощью циклов, например:

for (int item: array) {
    System.out.println(item); 
}
где item - элемент цикла в каждой итерации.

Второй вариант:

for (int i = 0; i < array.length; i++) {
    System.out.println(array[i]); 
}

22. Как можно найти элемент в массиве?

С помощью цикла и условного оператора.

int[] array = {1, 5, 15}
for (int x: array) {
    if (x == 5) {
        System.out.println(x); 
    }
}

23. Что будет если обратить к несуществующей ячейки массива?

получим ошибку во время исполнения программы ArrayIndexOutOfBoundsException

24. Как удалить ячейку в массиве?

Ячейку удалить нельзя, но можно обнулить её значение или ссылку на объект, которую она содержала.

25. Как отредактировать ячейку в массиве?

Так же как и присвоить ей значение. Обратиться к массиву по индексу и присвоить значение. Индексирование массива начинается с нуля.

array[0] = 10;
array[0] = 20;

26. Что такое автобоксинг и анбоксинг?

автобоксинг - автоматическая ковенртация компилятором между примитивными типами и 
классами обертками. Character ch = 'a'; 
Компилятор делает автоматическое преобразование по типу Integer.valueOf(i)

Преобразование происходит в случаях:
когда параметр передается в метод в котором ожидается класс обертками;
когда идет присвоение классу обертке.

анбоксинг - обратная операция преобразование из обертки в примитив.

Например:

Integer i; 
i = i % 2;
Т.к. операция % применима только к примитивам, то происходит i.intValue() % 2
Преобразование происходит в случаях:

когда параметр передается в метод в котором ожидается класс-обертка;
когда идет присвоение классу-обертке.

27. Как в Java передаются параметры в методы?

В Java параметры в методы передаются по значению. т.е. в методе создается локальная переменная 
аргумента и ей присваивается значение передаваемого параметра. Всегда:
для примитивов передается копия значения,
для объектов передается копия ссылки (а не сама ссылка). Это значит, что нельзя поменять ссылку 
в методе. Можно только поменять сам объект по ссылке. В примере ниже после выхода из 
метода в stroka сохранится ссылка на "MY SIMPLE STRING";

public class TestClass { 
    
    public static void changeIt(String stroka) { 
        stroka = "ANOTHER SIMPLE STRING"; 
    }

    public static void main(String[] args) { 
        String stroka = "MY SIMPLE STRING"; 
        System.out.println(stroka); //"MY SIMPLE STRING"
        changeIt(stroka); //передается копия ссылки!!!
        System.out.println(stroka); // "MY SIMPLE STRING" не изменилось
    } 
}

28. Почему нельзя изменить ссылку на объект в методе?

Потому что в метод передается не ссылка, а объект, который содержит копию ссылки.
Внутри метода можно изменить локальную ссылку на объект, но это не повлияет на ссылку, которую передали в метод.

29. Почему нельзя сравнивать ссылочные типы по оператору ==?

Потому, что будут сравниваться адреса в памяти на которые указывают ссылки, а не сами объекты. И они буду отличаться.
Чтобы сравнить объекты нужно использовать метод equals()

30. Почему примитивные типы можно сравнивать через оператор ==?

Потому, что они эти типы содержат значения, и оператором == буду сравниваться значения этих переменных.

31. Какие объекты могут быть использованы в операторе switch?

Можно использовать простые типы byte, short, char, int. Также можно использовать строки String и Enum, а также специальные классы, 
которые являются обёрткой для примитивных типов: Character, Byte, Short, Integer.
